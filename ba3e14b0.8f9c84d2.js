(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{84:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return u}));var r=n(2),a=n(6),o=(n(0),n(96)),s={id:"putting-all-together",title:"Putting all together",sidebar_label:"Putting all together"},c={unversionedId:"usage/putting-all-together",id:"usage/putting-all-together",isDocsHomePage:!1,title:"Putting all together",description:"Factory initialization",source:"@site/docs/usage/putting-all-together.md",slug:"/usage/putting-all-together",permalink:"/keuss/docs/usage/putting-all-together",editUrl:"https://github.com/pepmartinez/keuss/edit/master/website/docs/usage/putting-all-together.md",version:"current",sidebar_label:"Putting all together",sidebar:"someSidebar",previous:{title:"Concepts",permalink:"/keuss/docs/concepts"},next:{title:"Bucket-based backends",permalink:"/keuss/docs/usage/buckets"}},i=[{value:"Factory initialization",id:"factory-initialization",children:[]},{value:"Queue creation",id:"queue-creation",children:[]},{value:"Put elements in queue (push)",id:"put-elements-in-queue-push",children:[]},{value:"Get elements from queue (pop)",id:"get-elements-from-queue-pop",children:[]},{value:"Reserve-commit-rollback",id:"reserve-commit-rollback",children:[]},{value:"Termination",id:"termination",children:[]}],l={rightToc:i};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"factory-initialization"},"Factory initialization"),Object(o.b)("p",null,"First, choose a factory, also known as backend:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"const MQ = require ('../../backends/mongo');\n")),Object(o.b)("p",null,"Then, simply execute the backend, passing the config, to obtain a working factory:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"MQ ({\n  url: 'mongodb://localhost/keuss_test'\n}, (err, factory) => {\n  if (err) return console.error(err);\n\n  // factory is ready to be used\n\n}\n")),Object(o.b)("p",null,"You can create and use as many factories as desided, from the same or many backends"),Object(o.b)("h2",{id:"queue-creation"},"Queue creation"),Object(o.b)("p",null,"You use the factory to create queues:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"const q1 = factory.queue ('test_queue_1', {});\nconst q2 = factory.queue ('test_queue_2', {});\n")),Object(o.b)("p",null,"A queue can be created more than once with the same name, inside the same factory (this is a common procedure when consumer and producer are separated). The effect would be virtually the same as sharing the queue:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"const q_consumer = factory.queue ('test_queue', {});\nconst q_producer = factory.queue ('test_queue', {});\n")),Object(o.b)("h2",{id:"put-elements-in-queue-push"},"Put elements in queue (push)"),Object(o.b)("p",null,"putting elements in a queue is simple enough:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"const elem = {\n  elem: 1,\n  headline: 'something something',\n  tags: {\n    a: 1,\n    b: 2\n  }\n};\n\nq1.push (elem, (err, res) => {\n  // push finished, either with error or success...\n}),\n")),Object(o.b)("h2",{id:"get-elements-from-queue-pop"},"Get elements from queue (pop)"),Object(o.b)("p",null,"The easiest way to get elements from a queue is with a simple pop(). This would block until an element is ready, it would remove it from the queue and return it."),Object(o.b)("p",null,"This way of working is often referred to as ",Object(o.b)("em",{parentName:"p"},"at-most-once")," since it guarantees that each element in the queue will be processed no more than one time (it would be zero times, if something happens after ",Object(o.b)("inlineCode",{parentName:"p"},"pop()")," ands but before the element is actually managed)"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"const consumer_label = 'consumer-1';\nq1.pop (consumer_label, (err, res) => {\n  if (err) return console.error (err);\n\n  console.log (res);\n      // this should print something like:\n      // {\n      //   _id: <some id>,\n      //   mature: <some date>,\n      //   payload: { elem: 1, headline: 'something something', tags: { a: 1, b: 2 } },\n      //   tries: 0\n      // }\n      //\n      // that is, the actual element is at res.payload\n}\n")),Object(o.b)("h2",{id:"reserve-commit-rollback"},"Reserve-commit-rollback"),Object(o.b)("p",null,"A safer way to consume from a queue is using reserve: elements are reserved, processed and only then committed (and removed from the queue). A reserved element can also be rolled back (returned to queue) if the processing failed and the element needs to be reprocessed in the future; also, any reserved element will auto-rollback after some tiem elapsed, if neither commit nor rollback is done. This is known as ",Object(o.b)("em",{parentName:"p"},"at-least-once")," cause it guarantees all elements wold be processed at least once"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"const consumer_label = 'consumer-1';\nq1.pop (consumer_label, {reserve: true}, (err, elem) => {\n  if (err) return console.error (err);\n\n  // res is ready to be processed\n  do_some_processing (elem.payload, err => {\n    if (err) {\n      // error, rollback so it gets retried, adding a delay\n      const next_t = new Date().getTime () + 15000;\n      q1.ko (item, next_t, () = >{\n        // the element is returned to queue, but it won't be available until 15 secs have passed\n      });\n    }\n    else {\n      // processing went fine, commit element\n      q1.ok (item, () => {\n        // the element is removed from the queue\n      });\n    }\n  });\n}\n")),Object(o.b)("h2",{id:"termination"},"Termination"),Object(o.b)("p",null,"Once all is done, you can free all the resources associated to the factory by closing it:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"factory.close (err => {\n  // factory is now closed and cannot be used anymore\n});\n")),Object(o.b)("p",null,"Once a factory is closed it cannot be used, ",Object(o.b)("em",{parentName:"p"},"and all the queues created through it will becomes unusable too")))}u.isMDXComponent=!0},96:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),u=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=u(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=u(n),b=r,d=p["".concat(s,".").concat(b)]||p[b]||m[b]||o;return n?a.a.createElement(d,c(c({ref:t},l),{},{components:n})):a.a.createElement(d,c({ref:t},l))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=b;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:r,s[1]=c;for(var l=2;l<o;l++)s[l]=n[l];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);