(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{68:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return c}));var i=t(2),r=t(6),a=(t(0),t(95)),o={id:"building",title:"Building Pipelines",sidebar_label:"Building"},l={unversionedId:"usage/pipelines/building",id:"usage/pipelines/building",isDocsHomePage:!1,title:"Building Pipelines",description:"Pipelines can be built in 3 ways:",source:"@site/docs/usage/pipelines/building.md",permalink:"/keuss/docs/usage/pipelines/building",editUrl:"https://github.com/pepmartinez/keuss/edit/master/website/docs/usage/pipelines/building.md",sidebar_label:"Building",sidebar:"someSidebar",previous:{title:"Processors",permalink:"/keuss/docs/usage/pipelines/processors"},next:{title:"Examples",permalink:"/keuss/docs/usage/pipelines/examples"}},s=[{value:"Direct Pipeline Creation",id:"direct-pipeline-creation",children:[]},{value:"Creation with a <code>PipelineBuilder</code>",id:"creation-with-a-pipelinebuilder",children:[{value:"Pipepine object",id:"pipepine-object",children:[]}]},{value:"Creation with <code>Factory.pipelineFromRecipe</code>",id:"creation-with-factorypipelinefromrecipe",children:[]}],p={rightToc:s};function c(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(i.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Pipelines can be built in 3 ways:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"By directly creating queues and processors, and bonding them together. This is rather low-level and is not the recommended way"),Object(a.b)("li",{parentName:"ul"},"By using a ",Object(a.b)("inlineCode",{parentName:"li"},"PipelineBuilder"),". This object provides a fluent API that's convenient and very simple. This is the recommended way to created pipelines in code"),Object(a.b)("li",{parentName:"ul"},"By using the method ",Object(a.b)("inlineCode",{parentName:"li"},"pipelineFromRecipe")," offered by the Queues Factories supporting pipelining. This allows a whole pipeline to be defined in a set of strings and therefore in external files; this makes pipelies portable, reproductible and totally cluster-ready")),Object(a.b)("h2",{id:"direct-pipeline-creation"},"Direct Pipeline Creation"),Object(a.b)("p",null,"This is a quite simple approach: you create the queues, then you create the Processors that would glue them. Processors take i theit constructors the queues they use, so it's rather straightforward:"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-javascript"}),"const MQ =  require ('../../../backends/pl-mongo');\nconst DCT = require ('../../../Pipeline/DirectLink');\nconst SNK = require ('../../../Pipeline/Sink');\nconst CHC = require ('../../../Pipeline/ChoiceLink');\n\nfunction sink_process (elem, done) {\n  // define processing for Sinks\n}\n\nconst factory_opts = {\n  // ...\n};\n\n// initialize factory\nMQ (factory_opts, (err, factory) => {\n  if (err) return console.error (err);\n\n  // factory ready, create queues on default pipeline\n  const q_opts = {aaa: 666, b: 'yy'};\n  const q1 = factory.queue ('pl_many_q_1', q_opts);\n  const q2 = factory.queue ('pl_many_q_2', q_opts);\n  const q3 = factory.queue ('pl_many_q_3', q_opts);\n  const q4 = factory.queue ('pl_many_q_4', q_opts);\n  const q5 = factory.queue ('pl_many_q_5', q_opts);\n\n  // tie them up:\n  const dl1 = new DCT (q1, q2);\n  const cl1 = new CHC (q2, [q3, q4, q5]);\n  const sk1 = new SNK (q3);\n  const sk2 = new SNK (q4);\n  const sk3 = new SNK (q5);\n\n  sk1.on_data (sink_process);\n  sk2.on_data (sink_process);\n  sk3.on_data (sink_process);\n\n  cl1.on_data (function (elem, done) {\n    // define processing for the ChoiceLink\n  });\n\n  dl1.on_data (function (elem, done) {\n    // define processing for the DirectLink\n  });\n\n  // start the whole lot\n  sk1.start ();\n  sk2.start ();\n  sk3.start ();\n  cl1.start ();\n  dl1.start ();\n\n  // pipeline is ready now. Push stuff to queues, see it work\n});\n\n")),Object(a.b)("p",null,"See ",Object(a.b)("a",Object(i.a)({parentName:"p"},{href:"/keuss/docs/usage/pipelines/processors"}),"Processors")," for all the available options and features (such as processing functions and error management)"),Object(a.b)("h2",{id:"creation-with-a-pipelinebuilder"},"Creation with a ",Object(a.b)("inlineCode",{parentName:"h2"},"PipelineBuilder")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"PipelineBuilder")," provides a simpler way to create pipelines using a fluent api. Builders are obtained through ",Object(a.b)("inlineCode",{parentName:"p"},"factory.builder()")," and offers the following methods:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"pipeline(name)"),": initializes a pipeline, passing a name to it. Must be called before any other method, and can be called only once"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"queue(name, opts)"),": creates a queue and adds it to the pipeline"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"directLink (name_src_q, name_dst_q, process_fn)"),": creates a DirectLink linking queues src_q and dst_q (specified by name), using the process function ",Object(a.b)("inlineCode",{parentName:"li"},"process_fn")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"choiceLink(name_src_q, [name_dst_q1, name_dst_q2, ...name_dst_qn], process_fn)"),": creates a ChoiceLink linking src_q and the array of dst_q (specified by name), using the process function ",Object(a.b)("inlineCode",{parentName:"li"},"process_fn")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"sink(name_src_q, process_fn)"),": creates a Sink on queue src_q (specified by name), using the process function ",Object(a.b)("inlineCode",{parentName:"li"},"process_fn")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"onError(fn)"),": sets the ",Object(a.b)("inlineCode",{parentName:"li"},"error")," event handler for all processirs created in the pipeline. As with the error handler for Processors, ",Object(a.b)("inlineCode",{parentName:"li"},"fn")," will receive a single param with the error; in this case the error will be augmented by adding an extra field ",Object(a.b)("inlineCode",{parentName:"li"},"processor"),", which will be areference to the ",Object(a.b)("inlineCode",{parentName:"li"},"Processor")," object originating the error"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"done(err, pipeline)"),": finished the pipeline creation. No other calls can be done to the builder afterwards. In case of error, the error will be passed in ",Object(a.b)("inlineCode",{parentName:"li"},"err"),"; if all went well ",Object(a.b)("inlineCode",{parentName:"li"},"err")," will be ",Object(a.b)("inlineCode",{parentName:"li"},"null")," and the newly created pipeline, an object of type ",Object(a.b)("inlineCode",{parentName:"li"},"Pipeline"),", will be passed in the ",Object(a.b)("inlineCode",{parentName:"li"},"pipeline"),"; all further interactions with the pipeline will happen through this object")),Object(a.b)("h3",{id:"pipepine-object"},"Pipepine object"),Object(a.b)("p",null,"The new Pipeline object exports the following methods:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"start()"),": starts the pipeline (simply calls ",Object(a.b)("inlineCode",{parentName:"li"},"start()")," on all processors)"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"stop()"),": stops the pipeline (simply calls ",Object(a.b)("inlineCode",{parentName:"li"},"stop()")," on all processors)")),Object(a.b)("p",null,"Here's a simplified example (for a complete, working example see ",Object(a.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/pepmartinez/keuss/tree/master/examples/pipelines/builder"}),"here"),"):"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-javascript"}),"MQ (factory_opts, (err, factory) => {\n  if (err) return console.error (err);\n  const q_opts = {};\n\n  factory\n  .builder ()\n  .pipeline ('the-pipeline')\n  .queue ('test_pl_1', q_opts)\n  .queue ('test_pl_2', q_opts)\n  .queue ('test_pl_3', q_opts)\n  .queue ('test_pl_4', q_opts)\n  .queue ('test_pl_5', q_opts)\n  .directLink ('test_pl_1', 'test_pl_2', dl_process)\n  .choiceLink ('test_pl_2', ['test_pl_3', 'test_pl_4', 'test_pl_5'], choice_process)\n  .sink ('test_pl_3', sink_process)\n  .sink ('test_pl_4', sink_process)\n  .sink ('test_pl_5', sink_process)\n  .onError (console.log)\n  .done ((err, pl) => {\n    if (err) return console.error (err);\n    // pipeline pl is ready\n    pl.start ();\n    // pipeline pl is running\n  });\n});\n")),Object(a.b)("h2",{id:"creation-with-factorypipelinefromrecipe"},"Creation with ",Object(a.b)("inlineCode",{parentName:"h2"},"Factory.pipelineFromRecipe")))}c.isMDXComponent=!0},95:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return m}));var i=t(0),r=t.n(i);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=r.a.createContext({}),c=function(e){var n=r.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return r.a.createElement(p.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=r.a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),d=i,m=u["".concat(o,".").concat(d)]||u[d]||b[d]||a;return t?r.a.createElement(m,l(l({ref:n},p),{},{components:t})):r.a.createElement(m,l({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=t[p];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);