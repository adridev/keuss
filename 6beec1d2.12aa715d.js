(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{72:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return c}));var a=n(2),o=n(6),r=(n(0),n(90)),s={id:"buckets",title:"Bucket-based backends",sidebar_label:"Bucket-based backends"},i={unversionedId:"usage/buckets",id:"usage/buckets",isDocsHomePage:!1,title:"Bucket-based backends",description:"Up to version 1.4.X all backends worked in the same way, one element at a time: pushing and popping elements fired one or more operations per element on the underlying storage. This means the bottleneck would end up being the storage's I/O; redis and mongo both allow quite high I/O rates, enough to work at thousands of operations per second. Still, the limit was there.",source:"@site/docs/usage/buckets.md",permalink:"/keuss/docs/usage/buckets",editUrl:"https://github.com/pepmartinez/keuss/edit/master/website/docs/usage/buckets.md",sidebar_label:"Bucket-based backends",sidebar:"someSidebar",previous:{title:"Install",permalink:"/keuss/docs/usage/install"},next:{title:"Shutdown",permalink:"/keuss/docs/usage/shutdown"}},l=[{value:"bucket-mongo-safe",id:"bucket-mongo-safe",children:[]},{value:"bucket-mongo",id:"bucket-mongo",children:[]}],u={rightToc:l};function c(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Up to version 1.4.X all backends worked in the same way, one element at a time: pushing and popping elements fired one or more operations per element on the underlying storage. This means the bottleneck would end up being the storage's I/O; redis and mongo both allow quite high I/O rates, enough to work at thousands of operations per second. Still, the limit was there."),Object(r.b)("p",null,"Starting with v1.5.2 keuss includes 2 backends that do not share this limitation: they work by packing many elements inside a single 'storage unit'. Sure enough, this adds some complexity and extra risks, but the throughput improvement is staggering: on mongodb it goes from 3-4 Ktps to 35-40Ktps, and the bottleneck shifted from mongod to the client's cpu, busy serializing and deserializing payloads."),Object(r.b)("p",null,"Two bucked-based backends were added, both based on mongodb: bucket-mongo and bucket-mongo-safe. Both are usable, but there is little gain on using fhe first over the second: bucket-mongo was used as a prototyping area, and although perfectly usable, it turned out bucket-mongo-safe is better in almost every aspect: it provides better guarantees and more features, at about the same performance."),Object(r.b)("h3",{id:"bucket-mongo-safe"},"bucket-mongo-safe"),Object(r.b)("p",null,"In addition to the general options, the factory accepts the following extra options:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"bucket_max_size: maximum number of elements in a bucket, defaults to 1024"),Object(r.b)("li",{parentName:"ul"},"bucket_max_wait: milliseconds to wait before flushing a push bucket: pushes are buffered in a push bucket, which are flushed when they're full (bucket_max_size elements). If this amount of millisecs go by and the push bucket is not yet full, it is flushed as is. Defaults to 500."),Object(r.b)("li",{parentName:"ul"},"reserve_delay: number of seconds a bucket keeps its 'reserved' status when read from mongodb. Defaults to 30."),Object(r.b)("li",{parentName:"ul"},"state_flush_period: changes in state on each active/read bucket are flushed to mongodb every those milliseconds. Defaults to 500."),Object(r.b)("li",{parentName:"ul"},"reject_delta_base, reject_delta_factor: if no call to ko provide a next_t, the backend will set one using a simple grade-1 polynom, in the form of reject_delta_factor ",Object(r.b)("em",{parentName:"li"}," tries + reject_delta_base, in millisecs. They default to 10000 and ((reserve_delay ")," 1000) || 30000) respectively"),Object(r.b)("li",{parentName:"ul"},"reject_timeout_grace: number of seconds to wait since a bucket is reserver/read until it is considered timed out; after this, what is left of the bucket is rejected/retried. Defaults to (reserve_delay * 0.8)"),Object(r.b)("li",{parentName:"ul"},"state_flush_period: flush intermediate state changes in each active read bucked every this amount of millisecs")),Object(r.b)("p",null,"bucket-mongo-safe works by packing many payloads in a single mongodb object:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"at push() time, objects are buffered in memory and pushed (inserted) only when bucket_max_size has been reached or when a bucket has been getting filled for longer than bucket_max_wait millisecs."),Object(r.b)("li",{parentName:"ul"},"Then, at pop/reserve time full objects are read into mem, and then individual payloads returned from there. Both commits and pops are just marked in memory and then flushed every state_flush_period millisecs, or when the bucked is exhausted"),Object(r.b)("li",{parentName:"ul"},"Therefore, buckets remain unmodified since they are created in terms of the payloads they contain: a pop() or commit/ok would only mark payloads inside buckets as read/not-anymore-available, but buckets are never splitted nor merged")),Object(r.b)("p",null,"Thus, it is important to call drain() on queues of this backend: this call ensures all pending write buckets are interted in mongodb, and also ensures all in-memory buckets left are completely read (served through pop/reserve)"),Object(r.b)("p",null,"Also, there is little difference in performance and I/O between pop and reserve/commit; performance is no longer a reason to prefer one over the other."),Object(r.b)("h4",{id:"note-on-scheduling"},"Note on scheduling"),Object(r.b)("p",null,"Scheduling on bucket-mongo-safe is perfectly possible, but with a twist: the effective mature_t of a message will be the oldest in the whole bucket it resides in. This applies to both insert and rollback/ko. In practice this is usually not a big deal, since anyway the mature_t is a 'not before' time, and that's all Keuss (or any other queuing middleware) would guarantee."),Object(r.b)("h3",{id:"bucket-mongo"},"bucket-mongo"),Object(r.b)("p",null,"This is a simpler version of buckets-on-mongodb, and to all purposes bucket-mongo-safe should be preferred; it does not provide reserve, nor schedule. It is however a tad faster and lighter on I/O."),Object(r.b)("p",null,"It is provided only for historical and educational purposes"))}c.isMDXComponent=!0},90:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=o.a.createContext({}),c=function(e){var t=o.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return o.a.createElement(u.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},p=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),p=a,m=d["".concat(s,".").concat(p)]||d[p]||b[p]||r;return n?o.a.createElement(m,i(i({ref:t},u),{},{components:n})):o.a.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var u=2;u<r;u++)s[u]=n[u];return o.a.createElement.apply(null,s)}return o.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);