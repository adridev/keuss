(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{72:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return b}));var a=n(2),o=n(6),i=(n(0),n(91)),r={id:"buckets",title:"Bucket-based backends",sidebar_label:"Bucket-based backends"},s={unversionedId:"usage/buckets",id:"usage/buckets",isDocsHomePage:!1,title:"Bucket-based backends",description:"Up to version 1.4.X all backends worked in the same way, one element at a time: pushing and popping elements fired one or more operations per element on the underlying storage. This means the bottleneck would end up being the storage's I/O; redis and mongo both allow quite high I/O rates, enough to work at thousands of operations per second. Still, the limit was there.",source:"@site/docs/usage/buckets.md",permalink:"/keuss/docs/usage/buckets",editUrl:"https://github.com/pepmartinez/keuss/edit/master/website/docs/usage/buckets.md",sidebar_label:"Bucket-based backends",sidebar:"someSidebar",previous:{title:"Install",permalink:"/keuss/docs/usage/install"},next:{title:"Shutdown",permalink:"/keuss/docs/usage/shutdown"}},l=[{value:"bucket-mongo-safe",id:"bucket-mongo-safe",children:[]},{value:"bucket-mongo",id:"bucket-mongo",children:[]}],c={rightToc:l};function b(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Up to version 1.4.X all backends worked in the same way, one element at a time: pushing and popping elements fired one or more operations per element on the underlying storage. This means the bottleneck would end up being the storage's I/O; redis and mongo both allow quite high I/O rates, enough to work at thousands of operations per second. Still, the limit was there."),Object(i.b)("p",null,"Starting with v1.5.2 keuss includes 2 backends that do not share this limitation: they work by packing many elements inside a single 'storage unit'. Sure enough, this adds some complexity and extra risks, but the throughput improvement is staggering: on mongodb it goes from 3-4 Ktps to 35-40Ktps, and the bottleneck shifted from mongod to the client's cpu, busy serializing and deserializing payloads."),Object(i.b)("p",null,"Two bucked-based backends were added, both based on mongodb: ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#bucket-mongo"}),"bucket-mongo")," and ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#bucket-mongo-safe"}),"bucket-mongo-safe"),". Both are usable, but there is little gain on using fhe first over the second: ",Object(i.b)("inlineCode",{parentName:"p"},"bucket-mongo")," was used as a prototyping area, and although perfectly usable, it turned out ",Object(i.b)("inlineCode",{parentName:"p"},"bucket-mongo-safe")," is better in almost every aspect: it provides better guarantees and more features, at about the same performance."),Object(i.b)("h3",{id:"bucket-mongo-safe"},"bucket-mongo-safe"),Object(i.b)("p",null,"In addition to the general options, the factory accepts the following extra options:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"bucket_max_size"),": maximum number of elements in a bucket, defaults to 1024"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"bucket_max_wait"),": milliseconds to wait before flushing a push bucket: pushes are buffered in a push bucket, which are flushed when they're full (reach ",Object(i.b)("inlineCode",{parentName:"li"},"bucket_max_size")," elements). If this amount of millisecs go by and the push bucket is not yet full, it is flushed as is. Defaults to 500."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"reserve_delay"),": number of seconds a bucket keeps its 'reserved' status when read from mongodb. Defaults to 30."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"state_flush_period"),": changes in state on each active/read bucket are flushed to mongodb every those milliseconds. Defaults to 500."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"reject_delta_base"),", ",Object(i.b)("inlineCode",{parentName:"li"},"reject_delta_factor"),": if no call to ",Object(i.b)("inlineCode",{parentName:"li"},"ko")," provide a ",Object(i.b)("inlineCode",{parentName:"li"},"next_t"),", the backend will set one using a simple grade-1 polynom, in the form of ",Object(i.b)("inlineCode",{parentName:"li"},"reject_delta_factor * tries + reject_delta_base"),", in millisecs. They default to ",Object(i.b)("inlineCode",{parentName:"li"},"10000")," and ",Object(i.b)("inlineCode",{parentName:"li"},"((reserve_delay * 1000) || 30000)")," respectively"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"reject_timeout_grace"),": number of seconds to wait since a bucket is reserved/read until it is considered timed out; after this, what is left of the bucket is rejected/retried. Defaults to (",Object(i.b)("inlineCode",{parentName:"li"},"reserve_delay")," * ",Object(i.b)("inlineCode",{parentName:"li"},"0.8"),")"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"state_flush_period"),": flush intermediate state changes in each active read bucked every this amount of millisecs")),Object(i.b)("p",null,"Bucket-mongo-safe works by packing many payloads in a single mongodb object:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"At ",Object(i.b)("inlineCode",{parentName:"li"},"push()")," time, objects are buffered in memory and pushed (inserted) only when bucket_max_size has been reached or when a bucket has been getting filled for longer than bucket_max_wait millisecs."),Object(i.b)("li",{parentName:"ul"},"At ",Object(i.b)("inlineCode",{parentName:"li"},"pop/reserve")," time full objects are read into mem, and then individual payloads returned from there. Both commits and pops are just marked in memory and then flushed every state_flush_period millisecs, or when the bucked is exhausted."),Object(i.b)("li",{parentName:"ul"},"Buckets remain unmodified since they are created in terms of the payloads they contain: a ",Object(i.b)("inlineCode",{parentName:"li"},"pop()")," or ",Object(i.b)("inlineCode",{parentName:"li"},"ko/ok")," would only mark payloads inside buckets as read/not-anymore-available, but buckets are never splitted nor merged.")),Object(i.b)("p",null,"Thus, it is important to call ",Object(i.b)("inlineCode",{parentName:"p"},"drain()")," on queues of this backend: this call ensures all pending write buckets are interted in mongodb, and also ensures all in-memory buckets left are completely read (served through pop/reserve)."),Object(i.b)("p",null,"Also, there is little difference in performance and I/O between ",Object(i.b)("inlineCode",{parentName:"p"},"pop")," and ",Object(i.b)("inlineCode",{parentName:"p"},"reserve/commit"),"; performance is no longer a reason to prefer one over the other."),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Scheduling on ",Object(i.b)("inlineCode",{parentName:"p"},"bucket-mongo-safe")," is perfectly possible, but with a twist: the effective ",Object(i.b)("inlineCode",{parentName:"p"},"mature_t")," of a message will be the oldest in the whole bucket it resides in. This applies to both insert and rollback/ko. In practice this is usually not a big deal, since anyway the ",Object(i.b)("inlineCode",{parentName:"p"},"mature_t")," is a 'not before' time, and that's all Keuss (or any other queuing middleware) would guarantee."))),Object(i.b)("h3",{id:"bucket-mongo"},"bucket-mongo"),Object(i.b)("p",null,"This is a simpler version of buckets-on-mongodb, and for all purposes ",Object(i.b)("inlineCode",{parentName:"p"},"bucket-mongo-safe")," should be preferred; it does not provide reserve, nor schedule. It is however a tad faster and lighter on I/O."),Object(i.b)("p",null,"It is provided only for historical and educational purposes."))}b.isMDXComponent=!0},91:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var a=n(0),o=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=o.a.createContext({}),b=function(e){var t=o.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=b(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},p=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=b(n),p=a,m=d["".concat(r,".").concat(p)]||d[p]||u[p]||i;return n?o.a.createElement(m,s(s({ref:t},c),{},{components:n})):o.a.createElement(m,s({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var c=2;c<i;c++)r[c]=n[c];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);